using System;using UnityEngine;using UnityEditor;using System.Collections;using System.Collections.Generic;using System.Linq;using System.IO;using Debug = UnityEngine.Debug;using Object = UnityEngine.Object;using ForieroEngine;using UnityEditorInternal;using System.Text.RegularExpressions;using ForieroEditor.Extensions;namespace ForieroEditor.Tools.MultiProjectBuilder{    public partial class MultiProjectBuilder : ScriptableObject    {        void SetPlatformWSA(MultiProjectBuilder.PlatformVersion platformVersion)        {            //var icons = PlayerSettings.GetIconSizesForTargetGroup(BuildTargetGroup.WSA);            //foreach(var icon in icons){            //    Debug.Log(icon);            //}            //return;            // PlayerSettings.WSA.            //Debug.Log(platformVersion.targetGroup.ToString());            if (platformVersion.targetGroup != BuildTargetGroup.WSA)                return;            if (platformVersion.storeSetttings != null)            {                PlayerSettings.WSA.packageName = platformVersion.storeSetttings.wsa.packageIdentityName;                //PlayerSettings.WSA.packageFamilyName = platformVersion.storeSetttings.wsa.packageFamilyName;            }            PlayerSettings.WSA.packageVersion = new Version(platformVersion.version);            Regex re = new Regex(@"\d+");            foreach (PlayerSettings.WSAImageType t in Enum.GetValues(typeof(PlayerSettings.WSAImageType)))            {                foreach (PlayerSettings.WSAImageScale s in Enum.GetValues(typeof(PlayerSettings.WSAImageScale)))                {                    MatchCollection typeMatches = re.Matches(t.ToString());                    MatchCollection scaleMatches = re.Matches(s.ToString());                    int size = 0;                    int baseSize = 0;                    if (typeMatches.Count == 0)                    {                        switch (t)                        {                            case PlayerSettings.WSAImageType.PackageLogo:                                baseSize = 50;                                break;                            case PlayerSettings.WSAImageType.UWPSquare44x44Logo:                                baseSize = 44;                                break;                            case PlayerSettings.WSAImageType.UWPSquare71x71Logo:                                baseSize = 71;                                break;                            case PlayerSettings.WSAImageType.UWPSquare150x150Logo:                                baseSize = 150;                                break;                            case PlayerSettings.WSAImageType.UWPSquare310x310Logo:                                baseSize = 310;                                break;                            case PlayerSettings.WSAImageType.UWPWide310x150Logo:                                baseSize = 310;                                break;                            case PlayerSettings.WSAImageType.SplashScreenImage:                                baseSize = 620;                                break;                            default:                                continue;                        }                    }                    else                    {                        baseSize = int.Parse(typeMatches[0].Value);                    }                    if (s.ToString().Contains("Target"))                    {                        size = baseSize = int.Parse(scaleMatches[0].Value);                    }                    else                    {                        float sizeFloat = baseSize * float.Parse(scaleMatches[0].Value) / 100f;                        float rest = sizeFloat - Mathf.FloorToInt(sizeFloat);                        size = rest < 0.5f ? Mathf.FloorToInt(sizeFloat) : Mathf.CeilToInt(sizeFloat);                    }                    string assetPath = "";                    if (t.ToString().ToLower().Contains("wide") || t.ToString().ToLower().Contains("splash"))                    {                        assetPath = AssetDatabase.GetAssetPath(platformVersion.wsa.wsa_wide_icon);                    }                    else                    {                        assetPath = AssetDatabase.GetAssetPath(platformVersion.wsa.wsa_icon);                    }                    string file = size.ToString() + ".jpg";                    string path = assetPath + "/" + file;                    Texture2D o = AssetDatabase.LoadAssetAtPath<Texture2D>(path);                    var log = "WSA Image SetVisualAssetsImage : " + path + " " + t.ToString() + " " + s.ToString();                    if (o)                    {                        try {                            Debug.Log(log);                            PlayerSettings.WSA.SetVisualAssetsImage(path, t, s);                            var setPath = PlayerSettings.WSA.GetVisualAssetsImage(t, s);
                            Debug.Log(setPath);                        } catch (Exception) {                            Debug.LogError(log);                        }                    }                    else                    {                        Debug.LogError(log);                        try
                        {
                            PlayerSettings.WSA.SetVisualAssetsImage("", t, s);
                        } catch (Exception)
                        {

                        }                    }                }            }        }    }}